# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest
  name: default

variables:
  majorVersion: '1'
  minorVersion: '0'
  artifactVersion: ''

steps:
# The first task is the dotnet command build, pointing to our csproj file
- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    projects: '/home/ubuntu/myagent/_work/1/s/sample1.csproj'

- script: |
    major_version=${env:majorVersion}
    minor_version=${env:minorVersion}
    build_number=$(Build.BuildNumber)
    new_version="$major_version.$minor_version.$build_number"
    echo "New artifact version: $new_version"
    artifactVersion="$new_version"
  displayName: 'Increment Version (Bash)'
  
# The second task is dotnet pack command again pointing to the csproj file
# The nobuild means the project will not be compiled before running pack, because its already built in above step
#- task: DotNetCoreCLI@2
#  displayName: "dotnet pack"
#  inputs:
#    command: 'pack'
#    arguments: '--configuration $(buildConfiguration)'
#    packagesToPack: '/home/ubuntu/myagent/_work/1/s/sample1.csproj'

- script: dotnet pack -p Version=1.0.$(Build.BuildId)
  displayName: 'Create NuGet Package'    
    
#- script: dotnet nuget push --source "polonskyzation" --api-key abc /home/ubuntu/myagent/_work/1/a/
#  displayName: 'dotnet nuget push'
- script: dotnet nuget push --source "polonskyzation" --api-key az /home/ubuntu/myagent/_work/1/s/bin/Release/sample1.1.0.$(Build.BuildId).nupkg
  displayName: 'publish NuGet Package'